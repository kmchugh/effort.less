// This should be used in conjunction with normalize.css (http://necolas.github.com/normalize.css/)
#effortless
{
    /**
    * All dimension type modifiers should be placed within this namespace
    */
    #dimension
    {
        /**
        *  Helper for setting the minimum size of an element
        */
        .min-size(@minSize)
        {
            #effortless > #dimension > .min-size(@minSize, @minSize);
        }

        /**
        *  Helper for setting the minimum size of an element
        */
        .min-size(@minWidth, @minHeight)
        {
            #effortless > #dimension > .min-width(@minWidth);
            #effortless > #dimension > .min-height(@minHeight);
        }

        /**
        * Cross browser rules for setting the minimum width of an element
        */
        .min-width(@minWidth : 800)
        {
            min-width: ~"@{minWidth}px"; width:~"expression(document.body.clientWidth < @{minWidth} ? '@{minWidth}px': 'auto' )";
        }


        /**
        * Cross browser rules for setting the minimum height of an element
        */
        .min-height(@minHeight : 600)
        {
            min-height: ~"@{minHeight}px"; height:~"expression(document.body.clientHeight < @{minHeight} ? '@{minHeight}px': 'auto' )";
        }

        /**
        *  Helper for setting the maximum size of an element
        */
        .max-size(@maxSize)
        {
            #effortless > #dimension > .max-size(@maxSize, @maxSize);
        }

        /**
        *  Helper for setting the maximum size of an element
        */
        .max-size(@maxWidth, @maxHeight)
        {
            #effortless > #dimension > .max-width(@maxWidth);
            #effortless > #dimension > .max-height(@maxHeight);
        }

        /**
        * Cross browser rules for setting the maximum height of an element
        */
        .max-height(@maxHeight : 600)
        {
            overflow: hidden;
            max-height: ~"@{maxHeight}px"; height:~"expression(document.body.clientHeight > @{maxHeight} ? '@{maxHeight}px': 'auto' )";
        }

        /**
        * Cross browser rules for setting the maximum width of an element
        */
        .max-width(@maxWidth : 600)
        {
            overflow: hidden;
            max-width: ~"@{maxWidth}px"; width:~"expression(document.body.clientWidth > @{maxWidth} ? '@{maxWidth}px': 'auto' )";
        }

        .size(@width, @height)
        {
            width: @width;
            height: @height;
        }

        .size(@size)
        {
            #effortless > #dimension > .size(@size, @size);
        }
    }

    /**
    * Layout modifiers in this namespace
    */
    #layout
    {

        /**
        * Horizontally Center the element
        **/
        .center()
        {
            display: block;
            margin-left: auto;
            margin-right: auto;
        }
    }

    /**
    * Border related modifiers
    */
    #border
    {
        /**
        * Gives an element a rounded border
        **/
        .rounded(@size : 1px, @type : solid, @colour : black, @radius : 6px)
        {
            border: @size @type @colour;
            #effortless > #background > .rounded(@radius);
        }
    }

    /**
    * Border related modifiers
    */
    #background
    {
        /**
        * Ensures the background area is rounded
        */
        .rounded(@radius : 6px)
        {
            -webkit-border-radius: @radius;
            -moz-border-radius: @radius;
            border-radius: @radius;
        }

        #gradients
        {
            // TODO: implment 3 colour gradients
            /**
            * Applies a cross browser gradient to the element, ie falls back to using a filter
            * current valid values for direction are horizontal, vertical, or the degrees, e.g. 45deg
            */
            // 2 colour
            .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo)
            {
                // TODO : Add parsing for horizontal reverse, and vertical reverse
                @standardDirection : ~`"@{direction}" == 'horizontal' ? 'top' : "@{direction}" == 'vertical' ? 'left' : "@{direction}"`;
                background: ~"-moz-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%, @{colourTwo} @{percentTwo}%)"; /* FF3.6+ */
                background: ~"-webkit-gradient(linear, left top, left bottom, color-stop(@{percentOne}%,@{colourOne}), color-stop(@{percentTwo}%,@{colourTwo}))"; /* Chrome,Safari4+ */
                background: ~"-webkit-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%)"; /* Chrome10+,Safari5.1+ */
                background: ~"-o-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%)"; /* Opera 11.10+ */
                background: ~"-ms-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%)"; /* IE10+ */
                background: ~"linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%)"; /* W3C */
                filter: ~"progid:DXImageTransform.Microsoft.gradient( startColorstr='@{colourOne}', endColorstr='@{colourTwo}',GradientType=0 )"; /* IE6-8 */
            }
            // 4 colour
            .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour)
            {
                // TODO : Add parsing for horizontal reverse, and vertical reverse
                @standardDirection : ~`"@{direction}" == 'horizontal' ? 'top' : "@{direction}" == 'vertical' ? 'left' : "@{direction}"`;
                background: ~"-moz-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%, @{colourTwo} @{percentTwo}%, @{colourThree} @{percentThree}%, @{colourFour} @{percentFour}%)"; /* FF3.6+ */
                background: ~"-webkit-gradient(linear, left top, left bottom, color-stop(@{percentOne}%,@{colourOne}), color-stop(@{percentTwo}%,@{colourTwo}), color-stop(@{percentThree}%,@{colourThree}), color-stop(@{percentFour}%,@{colourFour}))"; /* Chrome,Safari4+ */
                background: ~"-webkit-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%)"; /* Chrome10+,Safari5.1+ */
                background: ~"-o-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%)"; /* Opera 11.10+ */
                background: ~"-ms-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%)"; /* IE10+ */
                background: ~"linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%)"; /* W3C */
                filter: ~"progid:DXImageTransform.Microsoft.gradient( startColorstr='@{colourOne}', endColorstr='@{colourFour}',GradientType=0 )"; /* IE6-8 */
            }
            // 5 colour
            .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive)
            {
                // TODO : Add parsing for horizontal reverse, and vertical reverse
                @standardDirection : ~`"@{direction}" == 'horizontal' ? 'top' : "@{direction}" == 'vertical' ? 'left' : "@{direction}"`;
                background: ~"-moz-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%, @{colourTwo} @{percentTwo}%, @{colourThree} @{percentThree}%, @{colourFour} @{percentFour}%, @{colourFive} @{percentFive}%)"; /* FF3.6+ */
                background: ~"-webkit-gradient(linear, left top, left bottom, color-stop(@{percentOne}%,@{colourOne}), color-stop(@{percentTwo}%,@{colourTwo}), color-stop(@{percentThree}%,@{colourThree}), color-stop(@{percentFour}%,@{colourFour}), color-stop(@{percentFive}%,@{colourFive}))"; /* Chrome,Safari4+ */
                background: ~"-webkit-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* Chrome10+,Safari5.1+ */
                background: ~"-o-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* Opera 11.10+ */
                background: ~"-ms-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* IE10+ */
                background: ~"linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* W3C */
                filter: ~"progid:DXImageTransform.Microsoft.gradient( startColorstr='@{colourOne}', endColorstr='@{colourFive}',GradientType=0 )"; /* IE6-8 */
            }
            // 2 colour
            .gradient(@direction, @baseColour, @colourOne, @percentOne, @colourTwo, @percentTwo)
            {
                background: @baseColour;
                #effortless > #background > #gradients > .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo);
            }
            // 4 colour
            .gradient(@direction, @baseColour, @colourOne, @percentOne, @colourTwo, @percentTwo, @colourThree, @percentThree, @colourFour, @percentFour)
            {
                background: @baseColour;
                #effortless > #background > #gradients > .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour);
            }
            // 5 colour
            .gradient(@direction, @baseColour, @colourOne, @percentOne, @colourTwo, @percentTwo, @colourThree, @percentThree, @colourFour, @percentFour, @colourFive, @percentFive)
            {
                background: @baseColour;
                #effortless > #background > #gradients > .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive);
            }

            

            .pipe(@baseColour : #0000ff, @basePercent : 50, @modifier : 2, @direction : horizontal)
            {
                // TODO: Automate image Generation of pipe gradient
                #effortless > #background > #gradients > .gradient(@direction, @baseColour,
                                        lighten(desaturate(@baseColour, 60%), 40%), 0,
                                        lighten(desaturate(@baseColour, 40%), 15%), @basePercent / @modifier,
                                        @baseColour, @basePercent,
                                        lighten(desaturate(@baseColour, 30%), 10%), 100 - (@basePercent / @modifier),
                                        lighten(desaturate(@baseColour, 50%), 30%), 100);
            }
            .fade(@topColour: #ffffff, @bottomColour: #000000, @direction : horizontal, @topPercent : 0, @bottomPercent : 100)
            {
                #effortless > #background > #gradients > .gradient(@direction, @topColour, 
                                        @topColour, @topPercent, @bottomColour, @bottomPercent);

            }

            .gloss(@colour: #000000, @position: 50%, @direction : horizontal)
            {
                #effortless > #background > #gradients > .gradient(@direction, @colour,
                                        darken(@colour, 7.5), 0%,
                                        @colour, @position, 
                                        darken(@colour, 17.5), @position, 
                                        @colour, 100%);
            }
        }
    }
}

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
.clearFix() 
{
    *zoom:1;
    & :before, & :after 
    {
        content:"";
        display:table;
    }
    &:after 
    {
        clear:both;
    }
}

// // TODO: Need to include offsetting, left and right margin;
// // TODO: Need to add subcolumns;
// // TODO: Look at adding in percentage width;

/**
 Setup defaults for the grid system
*/
@grid-columns: 12;
@grid-width: 768;
@grid-gutter: .04;

.colWidth(@columnSize : 1, @columns: @grid-columns, @size : @grid-width, @gutter : @grid-gutter)
{
    // .11px is a rounding error helper
    width : ((@size / @columns * @columnSize) - @gutter * @size) - (.11px * @columns);
}
.colHeight(@columnCount : 1, @columns: @grid-columns, @size : @grid-width, @gutter : @grid-gutter)
{
    height : ((@columnCount - 1) * @gutterSize) + (floor((@size - ((@size * @gutter) * @columns)) / @columns)) * @columnCount * 1px;
}
.column(@columnCount: 1, @columns : @grid-columns, @size : @grid-width, @gutter : @grid-gutter)
{
    @marginSize: floor(@size * @gutter / 2px);
    .colWidth(@columnCount, @columns, @size, @gutter);
    display: inline-block;
    margin-left: @marginSize - .11px;
    margin-right: @marginSize - .11px;
}

.row(@size : @grid-width, @columns: @grid-columns)
{
    #effortless > #layout > .center();
    .clearFix();
    width : @size * 1px;

    & > .column
    {
        .column;
    }
}

html .column
{
    .column;
}

html .row
{
    .row;
}

.gridLayout(@size : @grid-width, @columns: @grid-columns, @gutter : @grid-gutter)
{
    .row;
    & .column.one {.column;}
    & .column.two {.column(2);}
    & .column.three {.column(3);}
    & .column.four {.column(4);}
    & .column.five {.column(5);}
    & .column.six {.column(6);}
    & .column.seven {.column(7);}
    & .column.eight {.column(8);}
    & .column.nine {.column(9);}
    & .column.ten {.column(10);}
    & .column.eleven {.column(11);}
    & .column.twelve {.column(12);}
    & .column.thirteen {.column(13);}
    & .column.fourteen {.column(14);}
    & .column.fifteen {.column(15);}
    & .column.sixteen {.column(16);}

    & .column.half {.column(@columns/2);}
    & .column.third {.column(@columns/3);}
    & .column.quarter {.column(@columns/4);}
}

.grid
{
    .gridLayout;
}

body
{
    width: 100%;
    .clearFix();
}


// // X-Large
// @media screen and (min-width: 1378px)
// {
//     .grid
//     {
//         .gridLayout(1378);
//     }
// }

// // Large
// @media screen and (max-width: 1377px) and (min-width: 1218px)
// {
//     .grid
//     {
//         .gridLayout(1218);
//     }
// }

// // Regular Desktop
// @media screen and (max-width: 1217px) and (min-width: 978px)
// {
//     .grid
//     {
//         .gridLayout(978);
//     }
// }

// // Medium Res Desktop (Default for IE 6-8)
// @media screen and (max-width: 977px) and (min-width: 768px)
// {
//     .grid
//     {
//         .gridLayout(768);
//     }
// }

// // Low Res Desktop / tablet, mobile landscape
// @media screen and (max-width: 767px) and (min-width: 480px)
// {
//     .grid
//     {
//         .rowLayout(480);
//     }
// }

// // Mobile portrait
// @media screen and (max-width: 479px)
// {
//     .grid
//     {
//         .rowLayout(320);
//     }
// }





