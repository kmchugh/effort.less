// This should be used in conjunction with normalize.css (http://necolas.github.com/normalize.css/)
#effortless
{
    /**
    * All dimension type modifiers should be placed within this namespace
    */
    #dimension
    {
        /**
        *  Helper for setting the minimum size of an element
        */
        .min-size(@minSize)
        {
            #effortless > #dimension > .min-size(@minSize, @minSize);
        }

        /**
        *  Helper for setting the minimum size of an element
        */
        .min-size(@minWidth, @minHeight)
        {
            #effortless > #dimension > .min-width(@minWidth);
            #effortless > #dimension > .min-height(@minHeight);
        }

        /**
        * Cross browser rules for setting the minimum width of an element
        */
        .min-width(@minWidth : 800)
        {
            min-width: ~"@{minWidth}px"; width:~"expression(document.body.clientWidth < @{minWidth} ? '@{minWidth}px': 'auto' )";
        }


        /**
        * Cross browser rules for setting the minimum height of an element
        */
        .min-height(@minHeight : 600)
        {
            min-height: ~"@{minHeight}px"; height:~"expression(document.body.clientHeight < @{minHeight} ? '@{minHeight}px': 'auto' )";
        }

        /**
        *  Helper for setting the maximum size of an element
        */
        .max-size(@maxSize)
        {
            #effortless > #dimension > .max-size(@maxSize, @maxSize);
        }

        /**
        *  Helper for setting the maximum size of an element
        */
        .max-size(@maxWidth, @maxHeight)
        {
            #effortless > #dimension > .max-width(@maxWidth);
            #effortless > #dimension > .max-height(@maxHeight);
        }

        /**
        * Cross browser rules for setting the maximum height of an element
        */
        .max-height(@maxHeight : 600)
        {
            overflow: hidden;
            max-height: ~"@{maxHeight}px"; height:~"expression(document.body.clientHeight > @{maxHeight} ? '@{maxHeight}px': 'auto' )";
        }

        /**
        * Cross browser rules for setting the maximum width of an element
        */
        .max-width(@maxWidth : 600)
        {
            overflow: hidden;
            max-width: ~"@{maxWidth}px"; width:~"expression(document.body.clientWidth > @{maxWidth} ? '@{maxWidth}px': 'auto' )";
        }

        .size(@width, @height)
        {
            width: @width;
            height: @height;
        }

        .size(@size)
        {
            #effortless > #dimension > .size(@size, @size);
        }
    }

    /**
    * Layout modifiers in this namespace
    */
    #layout
    {

        /**
        * Horizontally Center the element
        **/
        .center()
        {
            display: block;
            margin-left: auto;
            margin-right: auto;
        }
    }

    /**
    * Border related modifiers
    */
    #border
    {
        /**
        * Gives an element a rounded border
        **/
        .rounded(@size : 1px, @type : solid, @colour : black, @radius : 6px)
        {
            border: @size @type @colour;
            #effortless > #background > .rounded(@radius);
        }
    }

    /**
    * Border related modifiers
    */
    #background
    {
        /**
        * Ensures the background area is rounded
        */
        .rounded(@radius : 6px)
        {
            -webkit-border-radius: @radius;
            -moz-border-radius: @radius;
            border-radius: @radius;
        }


        #gradients
        {
            // TODO: Implement 2, 3, and four colour gradients
            /**
            * Applies a cross browser gradient to the element, ie falls back to using a filter
            * current valid values for direction are horizontal, vertical, or the degrees, e.g. 45deg
            */
            .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive)
            {
                // TODO : Add parsing for horizontal reverse, and vertical reverse
                @standardDirection : ~`"@{direction}" == 'horizontal' ? 'top' : "@{direction}" == 'vertical' ? 'left' : "@{direction}"`;
                background: ~"-moz-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%, @{colourTwo} @{percentTwo}%, @{colourThree} @{percentThree}%, @{colourFour} @{percentFour}%, @{colourFive} @{percentFive}%)"; /* FF3.6+ */
                #effortless > #background > #gradients > .chromeArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive);
                background: ~"-webkit-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* Chrome10+,Safari5.1+ */
                background: ~"-o-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* Opera 11.10+ */
                background: ~"-ms-linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* IE10+ */
                background: ~"linear-gradient(@{standardDirection}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* W3C */
                #effortless > #background > #gradients > .ieArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive);
            }
            .chromeArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive)
            {
                // TODO: Implement handling of @direction
                background: ~"-webkit-gradient(linear, left top, left bottom, color-stop(@{percentOne}%,@{colourOne}), color-stop(@{percentTwo}%,@{colourTwo}), color-stop(@{percentThree}%,@{colourThree}), color-stop(@{percentFour}%,@{colourFour}), color-stop(@{percentFive}%,@{colourFive}))"; /* Chrome,Safari4+ */
            }
            .ieArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive)
            {
                // TODO: Implement handling of @direction
                filter: ~"progid:DXImageTransform.Microsoft.gradient( startColorstr='@{colourOne}', endColorstr='#87bcea',GradientType=0 )"; /* IE6-8 */
            }

            .gradient(@direction, @baseColour, @colourOne, @percentOne,
                                @colourTwo, @percentTwo,
                                @colourThree, @percentThree,
                                @colourFour, @percentFour,
                                @colourFive, @percentFive)
            {
                background: @baseColour;
                #effortless > #background > #gradients > .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive);
            }

            .pipe(@baseColour : #0000ff, @basePercent : 50, @modifier : 2, @direction : horizontal)
            {
                // TODO: Automate image Generation of pipe gradient
                #effortless > #background > #gradients > .gradient(@direction, @baseColour,
                                        lighten(desaturate(@baseColour, 60%), 40%), 0,
                                        lighten(desaturate(@baseColour, 40%), 15%), (@basePercent / @modifier),
                                        @baseColour, @basePercent,
                                        lighten(desaturate(@baseColour, 30%), 10%), (@basePercent + ((100 - @basePercent) / @modifier)),
                                        lighten(desaturate(@baseColour, 50%), 30%), 100);
            }
        }
    }
}

/**
 Setup for the grid system
*/

.gridLayout(@size : 748)
{
    @gutter : floor(@size *.04);
    @column : floor((@size - (@gutter * 11)) / 12);

    width: @size*1px;

    #effortless > #layout > .center();

    & .column {float:left; margin-left: @gutter*1px;}
    & .column:first-child{margin-left: 0;}

    & .column.one {.colWidth(1, @column, @gutter);}
    & .column.two {.colWidth(2, @column, @gutter);}
    & .column.three {.colWidth(3, @column, @gutter);}
    & .column.four {.colWidth(4, @column, @gutter);}
    & .column.five {.colWidth(5, @column, @gutter);}
    & .column.six {.colWidth(6, @column, @gutter);}
    & .column.seven {.colWidth(7, @column, @gutter);}
    & .column.eight {.colWidth(8, @column, @gutter);}
    & .column.nine {.colWidth(9, @column, @gutter);}
    & .column.ten {.colWidth(10, @column, @gutter);}
    & .column.eleven {.colWidth(11, @column, @gutter);}
    & .column.twelve {.colWidth(12, @column, @gutter);}
}
.rowLayout(@size : 748)
{
    #effortless > #layout > .center();

    width: @size*1px;

    & .column {float:none; margin-left: 0;}

    /** This is rewritten because of specificity and the default layout **/
    & .column.one, & .column.two, & .column.three, & .column.four, & .column.five
        & .column.six, & .column.seven, & .column.eight, & .column.nine, & .column.ten
        & .column.eleven, & .column.twelve
        {width: @size*1px;}
}

.grid
{
    .gridLayout(748);

    div.row { height: 1%; }
    div.row-end { clear: both; font: 1px/1px sans-serif; height: 1px; overflow: hidden; }
}


.colWidth(@columns, @size, @gutter)
{
    width: (floor((@columns * (@size + @gutter)) - @gutter))*1px;
}

// X-Large
@media screen and (min-width: 1378px)
{
    .grid
    {
        .gridLayout(1378);
    }
}

// Large
@media screen and (max-width: 1377px) and (min-width: 1218px)
{
    .grid
    {
        .gridLayout(1218);
    }
}

// Regular Desktop
@media screen and (max-width: 1217px) and (min-width: 978px)
{
    .grid
    {
        .gridLayout(978);
    }
}

// Medium Res Desktop (Default for IE 6-8)
@media screen and (max-width: 977px) and (min-width: 768px)
{
    .grid
    {
        .gridLayout(768);
    }
}

// Low Res Desktop / tablet, mobile landscape
@media screen and (max-width: 767px) and (min-width: 480px)
{
    .grid
    {
        .rowLayout(480);
    }
}

// Mobile portrait
@media screen and (max-width: 479px)
{
    .grid
    {
        .rowLayout(320);
    }
}




