/**
 * When including effort.less in a page, the following variables must be defined to set up the defaults
 * This will remain this way until the lessphp compiler allows the overridding of variables like the .js compiler does
 *
 * @grid-columns: 12;       // This would mean a base grid of 12 columns
 * @grid-width: 768;           // This will fix a row at 768 pixels
 * @grid-gutter: .03;           // This will create gutters of .03%
 * @corner-radius: 6px;     // All corner would have a 6px radius by default
 * @base-colour: red;   // The base colour scheme would be red, a colour scheme would be created from that
 * @text-colour: #blue; // Default text colour would be blue, a default would be created from that
 * @background-colour: white;   // Background colour would be blue a scheme would be created  from that
 * */

@colour-step1 : 10%;
@colour-step2: 20%;

// Colour definitions :
// BASE colour scheme
@colour: @base-colour;      // Base colour
@lighter: lighten(spin(@colour, 5), @colour-step1);
@lightest: lighten(spin(@colour, 10), @colour-step2);
@darker: darken(spin(@colour, -5), @colour-step1);
@darkest: darken(spin(@colour, -10), @colour-step2);

// COMPLIMENT colour scheme
@comp: spin(@colour, 180);
@comp-lighter: lighten(spin(@comp, 5), @colour-step1);
@comp-lightest: lighten(spin(@comp, 10), @colour-step2);
@comp-darker: darken(spin(@comp, -5), @colour-step1);
@comp-darkest: darken(spin(@comp, -10), @colour-step2);

// TEXT colour scheme
@text: @text-colour;
@text-lighter: lighten(spin(@text, 5), @colour-step1);
@text-lightest: lighten(spin(@text, 10), @colour-step2);
@text-darker: darken(spin(@text, -5), @colour-step1);
@text-darkest: darken(spin(@text, -10), @colour-step2);

// Background colour scheme
@background: @background-colour;
@background-lighter: lighten(spin(@background, 5), @colour-step1);
@background-lightest: lighten(spin(@background, 10), @colour-step2);
@background-darker: darken(spin(@background, -5), @colour-step1);
@background-darkest: darken(spin(@background, -10), @colour-step2);

// Gutter size in pixels
@gutterSize: floor((@grid-width * @grid-gutter) / 2px);


// This should be used in conjunction with normalize.css (http://necolas.github.com/normalize.css/)
#effortless
{
    /**
    * All dimension type modifiers should be placed within this namespace
    */
    #dimension
    {
        /**
        *  Helper for setting the minimum size of an element
        */
        .min-size(@minSize)
        {
            #effortless > #dimension > .min-size(@minSize, @minSize);
        }

        /**
        *  Helper for setting the minimum size of an element
        */
        .min-size(@minWidth, @minHeight)
        {
            #effortless > #dimension > .min-width(@minWidth);
            #effortless > #dimension > .min-height(@minHeight);
        }

        /**
        * Cross browser rules for setting the minimum width of an element
        */
        .min-width(@minWidth : 800)
        {
            min-width: ~"@{minWidth}px"; width:~"expression(document.body.clientWidth < @{minWidth} ? '@{minWidth}px': 'auto' )";
        }


        /**
        * Cross browser rules for setting the minimum height of an element
        */
        .min-height(@minHeight : 600)
        {
            min-height: ~"@{minHeight}px"; height:~"expression(document.body.clientHeight < @{minHeight} ? '@{minHeight}px': 'auto' )";
        }

        /**
        *  Helper for setting the maximum size of an element
        */
        .max-size(@maxSize)
        {
            #effortless > #dimension > .max-size(@maxSize, @maxSize);
        }

        /**
        *  Helper for setting the maximum size of an element
        */
        .max-size(@maxWidth, @maxHeight)
        {
            #effortless > #dimension > .max-width(@maxWidth);
            #effortless > #dimension > .max-height(@maxHeight);
        }

        /**
        * Cross browser rules for setting the maximum height of an element
        */
        .max-height(@maxHeight : 600)
        {
            overflow: hidden;
            max-height: ~"@{maxHeight}px"; height:~"expression(document.body.clientHeight > @{maxHeight} ? '@{maxHeight}px': 'auto' )";
        }

        /**
        * Cross browser rules for setting the maximum width of an element
        */
        .max-width(@maxWidth : 600)
        {
            overflow: hidden;
            max-width: ~"@{maxWidth}px"; width:~"expression(document.body.clientWidth > @{maxWidth} ? '@{maxWidth}px': 'auto' )";
        }

        .size(@width, @height)
        {
            width: @width;
            height: @height;
        }

        .size(@size)
        {
            #effortless > #dimension > .size(@size, @size);
        }
    }

    /**
    * Layout modifiers in this namespace
    */
    #layout
    {

        /**
        * Horizontally Center the element
        **/
        .center()
        {
            display: block;
            margin-left: auto;
            margin-right: auto;
        }

        .textColumns(@columns: 2, @gap: 2em)
        {
            -webkit-column-count: @columns;
            -webkit-column-gap:@gap;
            -moz-column-count: @columns;
            -moz-column-gap: 2em;
            -moz-column-rule: 5px solid black;
            -column-count: @columns;
            -column-gap:@gap;
            -column-rule: 5px solid black;
        }

        .textColumns(@columns: 2, @gap: 2em, @ruleSize, @ruleType, @ruleColour)
        {
            #effortless > #layout > .textColumns(@columns, @gap);
            -webkit-column-rule: @ruleSize @ruleType @ruleColour;
            -moz-column-rule: @ruleSize @ruleType @ruleColour;
            -column-rule: @ruleSize @ruleType @ruleColour;
        }
    }

    /**
    * Border related modifiers
    */
    #border
    {
        /**
        * Gives an element a rounded border
        **/
        .rounded(@size : 1px, @type : solid, @colour : black, @radius : @corner-radius){#effortless > #border > .rounded(@size, @type, @colour, @radius, @radius, @radius, @radius);}
        .rounded(@size : 1px, @type : solid, @colour : black, @left, @right){#effortless > #border > .rounded(@size, @type, @colour, @left, @right, @right, @left);}
        .rounded(@size : 1px, @type : solid, @colour : black, @topLeft, @topRight, @bottomRight, @bottomLeft)
        {
            border: @size @type @colour;
            #effortless > #background > .rounded(@topLeft, @topRight, @bottomRight, @bottomLeft);
        }
    }

    #transform
    {
        .matrix(@a  :1,  @b  :0, 
                @c  :0,  @d  :1, 
                @tx : 0, @ty :0)
        {
            transform: matrix(@a, @b, @c, @d, @tx, @ty);
            -webkit-transform: matrix(@a, @b, @c, @d, @tx, @ty);
            -moz-transform: matrix(@a, @b, @c, @d, @tx, @ty);
            -o-transform: matrix(@a, @b, @c, @d, @tx, @ty);
        }

        .matrix3d(@lx :1, @ly : 0, @lz : 0,
                  @wx :0, @wy : 1, @wz : 0,
                  @ax :0, @ay : 0, @az : 1,
                  @sx :0, @sy : 0, @sz : 0)
        {
            transform: matrix3d(@lx, @ly, @lz, 0,
                                @wx, @wy, @wz, 0,
                                @ax, @ay, @az, 0,
                                @sx, @sy, @sz, 1);
            -webkit-transform: matrix3d(@lx, @ly, @lz, 0,
                                        @wx, @wy, @wz, 0,
                                        @ax, @ay, @az, 0,
                                        @sx, @sy, @sz, 1);
            -moz-transform: matrix3d(@lx, @ly, @lz, 0,
                                     @wx, @wy, @wz, 0,
                                     @ax, @ay, @az, 0,
                                     @sx, @sy, @sz, 1);
            -o-transform: matrix3d(@lx, @ly, @lz, 0,
                                     @wx, @wy, @wz, 0,
                                     @ax, @ay, @az, 0,
                                     @sx, @sy, @sz, 1);
        }

        // TODO: Convert all transforms to direct matrix functions;
        .rotate3D(X, @degrees: 180)
        {
            @actualDegrees : @degrees * 1deg;
            transform: rotateX(@actualDegrees);
            -webkit-transform: rotateX(@actualDegrees); /* Safari and Chrome */
            -moz-transform: rotateX(@actualDegrees); /* Firefox */
            -o-transform: rotateX(@actualDegrees); /* Opera */
        }

        // TODO: Convert all transforms to direct matrix functions;
        .rotate3D(Y, @degrees: 180)
        {
            @actualDegrees : @degrees * 1deg;
            transform: rotateY(@actualDegrees);
            -webkit-transform: rotateY(@actualDegrees); /* Safari and Chrome */
            -moz-transform: rotateY(@actualDegrees); /* Firefox */
            -o-transform: rotateY(@actualDegrees); /* Opera */
        }

        .scale(@factor : 1.5){.scale(@factor, @factor);}

        .scale(@Xfactor : 1.5, @Yfactor : 1.5)
        {
            transform: scale(@Xfactor, @Yfactor);
            -webkit-transform: scale(@Xfactor, @Yfactor); /* Safari and Chrome */
            -moz-transform: scale(@Xfactor, @Yfactor); /* Firefox */
            -o-transform: scale(@Xfactor, @Yfactor);
        }

        // TODO: These is to be removed when implemented in the matrix3d;
        .spin(@scaleFactor: 1, @degrees: 359.9)
        {
            transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
            -webkit-transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
            -moz-transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
            -o-transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
        }

        .twist(@scaleFactor: 1, @degrees: 359.9)
        {
            transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
            -webkit-transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
            -moz-transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
            -o-transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
        }

        .transform(@rotate: 90deg, @scale: 1, @skew: 0deg, @translate: 0px) 
        {
            -webkit-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            -moz-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            -o-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            -ms-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
        }
    }

    #animation
    {
        .bezier(@p1X: 0, @p1Y: 0, @p2X: 1, @p2Y: 1)
        {
            transition-timing-function: bezier(@p1X, @p1Y, @p2X, @p2Y);
            -moz-transition-timing-function: bezier(@p1X, @p1Y, @p2X, @p2Y);
            -webkit-transition-timing-function: bezier(@p1X, @p1Y, @p2X, @p2Y);
            -o-transition-timing-function: bezier(@p1X, @p1Y, @p2X, @p2Y);
        }

        .period(@millis: 500)
        {
            @acutalMillis: @millis * 1ms;
            transition-duration: @acutalMillis;
            -moz-transition-duration: @acutalMillis; /* Firefox 4 */
            -webkit-transition-duration: @acutalMillis; /* Safari and Chrome */
            -o-transition-duration: @acutalMillis; /* Opera */
        }

        .linear(@millis: 500)
        {
            #effortless > #animation > .period(@millis);
            #effortless > #animation > .bezier(0, 0, 1, 1);
        }

        .ease(@millis: 500)
        {
            #effortless > #animation > .period(@millis);
            #effortless > #animation > .bezier(0.25, 0.1, 0.25, 1);
        }

        .ease-in(@millis: 500)
        {
            #effortless > #animation > .period(@millis);
            #effortless > #animation > .bezier(0.42, 0, 1, 1);
        }

        .ease-out(@millis: 500)
        {
            #effortless > #animation > .period(@millis);
            #effortless > #animation > .bezier(0, 0, 0.58, 1);
        }

        .ease-in-out(@millis: 500)
        {
            #effortless > #animation > .period(@millis);
            #effortless > #animation > .bezier(0.42, 0, 0.58, 1);
        }
    }

    /**
    * Border related modifiers
    */
    #background
    {
        /**
        * Ensures the background area is rounded
        */
        .rounded(@radius : @corner-radius){#effortless > #background > .rounded(@radius, @radius, @radius, @radius);}
        .rounded(@left, @right){#effortless > #background > .rounded(@left, @right, @right, @left);}

        .rounded(@colour, @radius: @corner-radius) when (iscolor(@colour))
       {
            #effortless > #background > .rounded(@radius, @radius, @radius, @radius);
            background-color: @colour; 
        }

        .rounded(@topLeft, @topRight, @bottomRight, @bottomLeft)
        {
            -webkit-border-radius: @arguments;
            -moz-border-radius: @arguments;
            border-radius: @arguments;
            -moz-background-clip: padding; 
            -webkit-background-clip: padding-box; 
            background-clip: padding-box; 
        }

        .rounded-topLeft(@radius : @corner-radius)
        {
            -webkit-border-top-left-radius: @arguments;
            -moz-border-top-left-radius: @arguments;
            border-top-left-radius: @arguments;
            -moz-background-clip: padding; 
            -webkit-background-clip: padding-box; 
            background-clip: padding-box; 
        }

        .rounded-bottomLeft(@radius : @corner-radius)
        {
            -webkit-border-bottom-left-radius: @arguments;
            -moz-border-bottom-left-radius: @arguments;
            border-bottom-left-radius: @arguments;
            -moz-background-clip: padding; 
            -webkit-background-clip: padding-box; 
            background-clip: padding-box; 
        }

        .rounded-topRight(@radius : @corner-radius)
        {
            -webkit-border-top-right-radius: @arguments;
            -moz-border-top-right-radius: @arguments;
            border-top-right-radius: @arguments;
            -moz-background-clip: padding; 
            -webkit-background-clip: padding-box; 
            background-clip: padding-box; 
        }

        .rounded-bottomRight(@radius : @corner-radius)
        {
            -webkit-border-bottom-right-radius: @arguments;
            -moz-border-bottom-right-radius: @arguments;
            border-bottom-right-radius: @arguments;
            -moz-background-clip: padding; 
            -webkit-background-clip: padding-box; 
            background-clip: padding-box; 
        }

        // TODO: Add support for multi value radii

        #gradients
        {
            // TODO: implment 3 colour gradients
            /**
            * Applies a cross browser gradient to the element, ie falls back to using a filter
            * current valid values for direction are horizontal, vertical, or the degrees, e.g. 45deg
            */
            // 2 colour
            .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo)
            {
                // TODO : Add parsing for horizontal reverse, and vertical reverse
                background: ~"-moz-linear-gradient(center @{direction}, @{colourOne} @{percentOne}%, @{colourTwo} @{percentTwo}%)"; /* FF3.6+ */
                background: ~"-webkit-gradient(linear, left top, left bottom, color-stop(@{percentOne}%,@{colourOne}), color-stop(@{percentTwo}%,@{colourTwo}))"; /* Chrome,Safari4+ */
                background: ~"-webkit-linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%)"; /* Chrome10+,Safari5.1+ */
                background: ~"-o-linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%)"; /* Opera 11.10+ */
                background: ~"-ms-linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%)"; /* IE10+ */
                background: ~"linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%)"; /* W3C */
                filter: ~"progid:DXImageTransform.Microsoft.gradient( startColorstr='@{colourOne}', endColorstr='@{colourTwo}',GradientType=0 )"; /* IE6-8 */
            }
            // 4 colour
            .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour)
            {
                // TODO : Add parsing for horizontal reverse, and vertical reverse
                background: ~"-moz-linear-gradient(center @{direction}, @{colourOne} @{percentOne}%, @{colourTwo} @{percentTwo}%, @{colourThree} @{percentThree}%, @{colourFour} @{percentFour}%)"; /* FF3.6+ */
                background: ~"-webkit-gradient(linear, left top, left bottom, color-stop(@{percentOne}%,@{colourOne}), color-stop(@{percentTwo}%,@{colourTwo}), color-stop(@{percentThree}%,@{colourThree}), color-stop(@{percentFour}%,@{colourFour}))"; /* Chrome,Safari4+ */
                background: ~"-webkit-linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%)"; /* Chrome10+,Safari5.1+ */
                background: ~"-o-linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%)"; /* Opera 11.10+ */
                background: ~"-ms-linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%)"; /* IE10+ */
                background: ~"linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%)"; /* W3C */
                filter: ~"progid:DXImageTransform.Microsoft.gradient( startColorstr='@{colourOne}', endColorstr='@{colourFour}',GradientType=0 )"; /* IE6-8 */
            }
            // 5 colour
            .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive)
            {
                // TODO : Add parsing for horizontal reverse, and vertical reverse
                background: ~"-moz-linear-gradient(center @{direction}, @{colourOne} @{percentOne}%, @{colourTwo} @{percentTwo}%, @{colourThree} @{percentThree}%, @{colourFour} @{percentFour}%, @{colourFive} @{percentFive}%)"; /* FF3.6+ */
                background: ~"-webkit-gradient(linear, left top, left bottom, color-stop(@{percentOne}%,@{colourOne}), color-stop(@{percentTwo}%,@{colourTwo}), color-stop(@{percentThree}%,@{colourThree}), color-stop(@{percentFour}%,@{colourFour}), color-stop(@{percentFive}%,@{colourFive}))"; /* Chrome,Safari4+ */
                background: ~"-webkit-linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* Chrome10+,Safari5.1+ */
                background: ~"-o-linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* Opera 11.10+ */
                background: ~"-ms-linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* IE10+ */
                background: ~"linear-gradient(@{direction}, @{colourOne} @{percentOne}%,@{colourTwo} @{percentTwo}%,@{colourThree} @{percentThree}%,@{colourFour} @{percentFour}%,@{colourFive} @{percentFive}%)"; /* W3C */
                filter: ~"progid:DXImageTransform.Microsoft.gradient( startColorstr='@{colourOne}', endColorstr='@{colourFive}',GradientType=0 )"; /* IE6-8 */
            }
            // 2 colour
            .gradient(horizontal, @baseColour, @colourOne, @percentOne, @colourTwo, @percentTwo)
            {
                background-color: @baseColour;
                #effortless > #background > #gradients > .standardArgs(top, @colourOne, @percentOne, @colourTwo, @percentTwo);
            }
            .gradient(vertical, @baseColour, @colourOne, @percentOne, @colourTwo, @percentTwo)
            {
                background-color: @baseColour;
                #effortless > #background > #gradients > .standardArgs(left, @colourOne, @percentOne, @colourTwo, @percentTwo);
            }

            // 4 colour
            .gradient(horizontal, @baseColour, @colourOne, @percentOne, @colourTwo, @percentTwo, @colourThree, @percentThree, @colourFour, @percentFour)
            {
                background-color: @baseColour;
                #effortless > #background > #gradients > .standardArgs(top, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour);
            }
            .gradient(vertical, @baseColour, @colourOne, @percentOne, @colourTwo, @percentTwo, @colourThree, @percentThree, @colourFour, @percentFour)
            {
                background-color: @baseColour;
                #effortless > #background > #gradients > .standardArgs(left, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour);
            }
            .gradient(@direction, @baseColour, @colourOne, @percentOne, @colourTwo, @percentTwo, @colourThree, @percentThree, @colourFour, @percentFour)
            {
                background-color: @baseColour;
                #effortless > #background > #gradients > .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour);
            }
            // 5 colour
            .gradient(horizontal, @baseColour, @colourOne, @percentOne, @colourTwo, @percentTwo, @colourThree, @percentThree, @colourFour, @percentFour, @colourFive, @percentFive)
            {
                background-color: @baseColour;
                #effortless > #background > #gradients > .standardArgs(horizontal, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive);
            }
            .gradient(vertical, @baseColour, @colourOne, @percentOne, @colourTwo, @percentTwo, @colourThree, @percentThree, @colourFour, @percentFour, @colourFive, @percentFive)
            {
                background-color: @baseColour;
                #effortless > #background > #gradients > .standardArgs(vertical, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive);
            }
            .gradient(@direction, @baseColour, @colourOne, @percentOne, @colourTwo, @percentTwo, @colourThree, @percentThree, @colourFour, @percentFour, @colourFive, @percentFive)
            {
                background-color: @baseColour;
                #effortless > #background > #gradients > .standardArgs(@direction, @colourOne, @percentOne, @colourTwo, @percentTwo,@colourThree, @percentThree,@colourFour, @percentFour,@colourFive, @percentFive);
            }



            .pipe(@baseColour : #000000, @basePercent : 50, @modifier : 2, @direction : horizontal)
            {
                // TODO: Automate image Generation of pipe gradient
                #effortless > #background > #gradients > .gradient(@direction, @baseColour,
                                        lighten(desaturate(@baseColour, 60%), 40%), 0,
                                        lighten(desaturate(@baseColour, 40%), 15%), @basePercent / @modifier,
                                        @baseColour, @basePercent,
                                        lighten(desaturate(@baseColour, 30%), 10%), 100 - (@basePercent / @modifier),
                                        lighten(desaturate(@baseColour, 50%), 30%), 100);
            }
            .fade(@topColour: #ffffff, @bottomColour: #000000, @direction : horizontal, @topPercent : 0, @bottomPercent : 100)
            {
                #effortless > #background > #gradients > .gradient(@direction, @topColour,
                                        @topColour, @topPercent, @bottomColour, @bottomPercent);
            }

            .gloss(@colour: #000000, @position: 50, @direction : horizontal)
            {
                #effortless > #background > #gradients > .gradient(@direction, @colour,
                                        darken(@colour, 7.5), 0,
                                        @colour, @position, 
                                        darken(@colour, 17.5), @position, 
                                        @colour, 100);
            }
        }
    }

    #shadow
    {
        .shadow(@values)
        {
            -webkit-box-shadow : @values;
            -moz-box-shadow : @values;
            box-shadow : @values;
        }

        .shadow(@x, @y, @blur, @spread, @colour)
        {
            #effortless > #shadow > .drop(@x, @y, @blur, @spread, @colour);
        }

        .shadow(@x, @y, @blur, @spread, @colour, @inset)
        {
            #effortless > #shadow > .inner(@x, @y, @blur, @spread, @colour);
        }

        .drop(@colour : @darkest)
        {
            #effortless > #shadow > .drop(3px, 3px, 5px, 5px, @colour);
        }

        .drop(@x: 3px, @y: 3px, @blur: 5px, @spread : 5px, @colour)
        {
            -webkit-box-shadow: @x @y @blur @colour;
            -moz-box-shadow: @x @y @blur @colour;
            box-shadow: @x @y @blur @colour;

            // TODO: Calculate angle from 0, 0 -> x, y;
            -ms-filter: ~"progid:DXImageTransform.Microsoft.Shadow(Strength=@{blur}, Direction=135, Color='@{colour}')";/* IE 8 */
            filter: ~"progid:DXImageTransform.Microsoft.Shadow(Strength=@{blur}, Direction=135, Color='@{colour}')";/* For IE 5.5 - 7 */
        }

        .reset()
        {
            -webkit-box-shadow: none;
            -moz-box-shadow: none;
            box-shadow: none;
            -ms-filter: none;
            filter: none;
        }

        .glow(@colour : white, @blur : 5px)
        {
            #effortless > #shadow > .drop(0, 0, @blur, @blur, @colour);
        }

        .inner(@colour : @darkest)
        {
            #effortless > #shadow > .inner(3px, 3px, 5px, 5px, @colour);
        }

        .inner(@x: 3px, @y: 3px, @blur: 5px, @spread : 5px, @colour)
        {
            -webkit-box-shadow: inset @x @y @blur @spread @colour;
            -moz-box-shadow: inset @x @y @blur @spread @colour;
            box-shadow: inset @x @y @blur @spread @colour;
        }



        .text(@colour : @text-darkest){#effortless > #shadow > .text(3px, 3px, 5px, @colour);}

        .text(@x: 3px, @y: 3px, @blur: 5px, @colour){text-shadow: @x @y @blur @colour;}

        .letterpress(@colour : @text-lightest, @offset : 2px){#effortless > #shadow > .text(@offset, @offset, @offset, fadeout(@colour, 10));}

        .hard(@colour: @text-darkest, @offset : 2px){#effortless > #shadow > .text(@offset, @offset, 0px, @colour);}

        // TODO: The rules below should be calling the base rule
        .double(@colour1 : @text-lightest, @colour2: @text-darker, @offset : 2px)
        {
            text-shadow: @offset @offset 0px @colour1,
                                    @offset*2 @offset*2 0px @colour2;
        }

        .far(@colour : @text-darkest, @x-offset : 0px, @y-offset : 2px)
        {
            text-shadow: @x-offset @y-offset 0px @colour, 
                                    @x-offset*1.5 @y-offset*1.5 @x-offset fadeout(@colour,  85),
                                    @x-offset*2.5 @y-offset*2.5 @x-offset fadeout(@colour, 90),
                                    @x-offset*3.5 @y-offset*3.5 @x-offset fadeout(@colour, 90);
        }

        .close(@colour : @text-darkest, @x-offset : 0px, @y-offset : 2px)
        {
            text-shadow: @x-offset @y-offset 0px fadeout(@colour,  60),
                                    @x-offset*1.5 @y-offset*1.5 @x-offset fadeout(@colour,  90),
                                    @x-offset*2.5 @y-offset*2.5 @x-offset fadeout(@colour, 90);
        }

        .textGlow(@colour: @text-lightest, @size : 6px){text-shadow: 0px 0px @size fadeout(@colour,  30);}
    }

    #effects
    {
        .opacity(@opacity : .5)
        {
            @intOpacity: @opacity * 100;
            -ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(Opacity=@{intOpacity})";/* IE 8 */
            filter: ~"alpha(opacity=@{intOpacity})"; /* IE 5-7 */
            -moz-opacity: @opacity; /* Netscape */
            -khtml-opacity: @opacity; /* Safari 1.x */
            -o-opacity: @opacity; /* Opera */
            opacity: @opacity; /* Good browsers */
        }
    }

    
}

// Helper for centering
.center{#effortless > #layout > .center();}

// // TODO: Need to include offsetting, left and right margin;
// // TODO: Need to add subcolumns;
// // TODO: Look at adding in percentage width;

.column(half, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
    .column(@grid-columns/2, @grid-columns, @grid-width, @grid-gutter);
}
.column(third, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
    .column(@grid-columns/3, @grid-columns, @grid-width, @grid-gutter);
}
.column(twoThirds, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
    .column((@grid-columns/3)*2, @grid-columns, @grid-width, @grid-gutter);
}
.column(quarter, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
    .column(@grid-columns/4, @grid-columns, @grid-width, @grid-gutter);
}
.column(threeQuarters, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
    .column((@grid-columns/4)*3, @grid-columns, @grid-width, @grid-gutter);
}
.column(whole, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
    .column(@grid-columns, @grid-columns, @grid-width, @grid-gutter);
}

.colWidth(@columnSize : 1, @grid-columns: @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
    // because we are using border: box, don't substract padding.
    width : floor((@grid-width / @grid-columns) * @columnSize) * 1px;
}
.colHeight(@columnCount : 1, @grid-columns: @grid-columns, @grid-width : @grid-width, @gutter : @grid-gutter)
{
    height : floor((@grid-width / @grid-columns) * @columnSize) * 1px;
}

.column(@columnCount: 1, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter) when (isnumber(@columnCount))
{
    @marginSize: floor((@grid-width * @grid-gutter) / 2px);
    .colWidth(@columnCount, @grid-columns, @grid-width, @grid-gutter);
    display: inline-block;
    margin-left: 0px;
    margin-right: 0px;
    padding-left: @marginSize;
    padding-right: @marginSize;
    float: left;
    .cf;
}
.row(@grid-width : @grid-width, @grid-columns: @grid-columns, @grid-gutter : @grid-gutter)
{
    .cf;
    #effortless > #layout > .center();
    width : @grid-width * 1px;

    &.twoColumn > div {.column(half, @grid-columns, @grid-width, @grid-gutter);}
    &.threeColumn > div {.column(third, @grid-columns, @grid-width, @grid-gutter);}
    &.fourColumn > div {.column(quarter, @grid-columns, @grid-width, @grid-gutter);}

    & > .column{.column;}
}

html .column{.column;}

html .row{.row;}

.gridLayout(@grid-width : @grid-width, @grid-columns: @grid-columns, @grid-gutter : @grid-gutter)
{
    .cf;
    width: @grid-width*1px;
    .center;

    > *.row{.row(@grid-width, @grid-columns, @grid-gutter);}

    & .column.one {.column;}
    & .column.two {.column(2);}
    & .column.three {.column(3);}
    & .column.four {.column(4);}
    & .column.five {.column(5);}
    & .column.six {.column(6);}
    & .column.seven {.column(7);}
    & .column.eight {.column(8);}
    & .column.nine {.column(9);}
    & .column.ten {.column(10);}
    & .column.eleven {.column(11);}
    & .column.twelve {.column(12);}
    & .column.thirteen {.column(13);}
    & .column.fourteen {.column(14);}
    & .column.fifteen {.column(15);}
    & .column.sixteen {.column(16);}

    & .column.half {.column(half, @grid-columns, @grid-width, @grid-gutter);}
    & .column.third {.column(third, @grid-columns, @grid-width, @grid-gutter);}
    & .column.twoThirds {.column(twoThirds, @grid-columns, @grid-width, @grid-gutter);}
    & .column.quarter {.column(quarter, @grid-columns, @grid-width, @grid-gutter);}
    & .column.threeQuarters {.column(threeQuarters, @grid-columns, @grid-width, @grid-gutter);}
    & .column.whole {.column(whole, @grid-columns, @grid-width, @grid-gutter);}
}

.grid{.gridLayout;}

// FROM http://nicolasgallagher.com/micro-clearfix-hack/
.cf
{
    /* For IE 6/7 (trigger hasLayout) */
      *zoom: 1;
    /* For modern browsers */
    &:before,
    &:after
    {
        content:"";
        display: table;
        // Fixes Opera/contenteditable bug:
        // http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
        line-height: 0;
    }
    &:after
    {
        clear: both;
    }
}

.more:after{content: "\00A0\000BB";}

/*! normalize.css 2011-11-04T15:38 UTC - http://github.com/necolas/normalize.css AND  http://meyerweb.com/eric/tools/css/reset/ v2.0 | 20110126 License: none (public domain)*/
article,aside,details,figcaption,figure,footer,header,hgroup,nav,section{display:block}audio,canvas,video{display:inline-block;*display:inline;*zoom:1}audio:not([controls]){display:none}[hidden]{display:none}html{font-size:100%;overflow-y:scroll;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}body,button,input,select,textarea{font-family:sans-serif}a:focus{outline:thin dotted}a:hover,a:active{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}blockquote{margin:1em 40px}dfn{font-style:italic}mark{background:#ff0;color:#000}pre,code,kbd,samp{font-family:monospace,serif;_font-family:'courier new',monospace;font-size:1em}pre{white-space:pre;white-space:pre-wrap;word-wrap:break-word}q{quotes:none}q:before,q:after{content:'';content:none}small{font-size:75%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}ul,ol{margin-left:0;padding:0 0 0 40px}dd{margin:0 0 0 40px}nav ul,nav ol{list-style:none;list-style-image:none}img{border:0;-ms-interpolation-mode:bicubic}svg:not(:root){overflow:hidden}figure{margin:0}form{margin:0}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:.35em .625em .75em}legend{border:0;*margin-left:-7px}button,input,select,textarea{font-size:100%;margin:0;vertical-align:baseline;*vertical-align:middle}button,input{line-height:normal}button,input[type="button"],input[type="reset"],input[type="submit"]{cursor:pointer;-webkit-appearance:button;*overflow:visible}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}textarea{overflow:auto;vertical-align:top}table{border-collapse:collapse;border-spacing:0}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none}table{border-collapse:collapse;border-spacing:0}

*
{
    -moz-box-sizing : border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}



// // X-Large
// @media screen and (min-width: 1378px)
// {
//     .grid
//     {
//         .gridLayout(1378);
//     }
// }

// // Large
// @media screen and (max-width: 1377px) and (min-width: 1218px)
// {
//     .grid
//     {
//         .gridLayout(1218);
//     }
// }

// // Regular Desktop
// @media screen and (max-width: 1217px) and (min-width: 978px)
// {
//     .grid
//     {
//         .gridLayout(978);
//     }
// }

// // Medium Res Desktop (Default for IE 6-8)
// @media screen and (max-width: 977px) and (min-width: 768px)
// {
//     .grid
//     {
//         .gridLayout(768);
//     }
// }

// // Low Res Desktop / tablet, mobile landscape
// @media screen and (max-width: 767px) and (min-width: 480px)
// {
//     .grid
//     {
//         .rowLayout(480);
//     }
// }

// // Mobile portrait
// @media screen and (max-width: 479px)
// {
//     .grid
//     {
//         .rowLayout(320);
//     }
// }





