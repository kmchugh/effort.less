/**
 * When including effort.less in a page, the following variables must be defined to set up the defaults
 * This will remain this way until the lessphp compiler allows the overridding of variables like the .js compiler does
 *
 * @grid-columns: 12;       // This would mean a base grid of 12 columns
 * @grid-width: 768;           // This will fix a row at 768 pixels
 * @grid-gutter: .03;           // This will create gutters of .03%
 * @corner-radius: 6px;     // All corner would have a 6px radius by default
 * @base-colour: red;   // The base colour scheme would be red, a colour scheme would be created from that
 * @text-colour: blue; // Default text colour would be blue, a default would be created from that
 * @background-colour: white;   // Background colour would be blue a scheme would be created  from that
 * */

@colour-step1 : 10%;
@colour-step2: 20%;

// Colour definitions :
// BASE colour scheme
@colour: @base-colour;      // Base colour
@lighter: lighten(spin(@colour, 5), @colour-step1);
@lightest: lighten(spin(@colour, 10), @colour-step2);
@darker: darken(spin(@colour, -5), @colour-step1);
@darkest: darken(spin(@colour, -10), @colour-step2);

// COMPLIMENT colour scheme
@comp: spin(@colour, 180);
@comp-lighter: lighten(spin(@comp, 5), @colour-step1);
@comp-lightest: lighten(spin(@comp, 10), @colour-step2);
@comp-darker: darken(spin(@comp, -5), @colour-step1);
@comp-darkest: darken(spin(@comp, -10), @colour-step2);

// TEXT colour scheme
@text: @text-colour;
@text-lighter: lighten(spin(@text, 5), @colour-step1);
@text-lightest: lighten(spin(@text, 10), @colour-step2);
@text-darker: darken(spin(@text, -5), @colour-step1);
@text-darkest: darken(spin(@text, -10), @colour-step2);

// Background colour scheme
@background: @background-colour;
@background-lighter: lighten(spin(@background, 5), @colour-step1);
@background-lightest: lighten(spin(@background, 10), @colour-step2);
@background-darker: darken(spin(@background, -5), @colour-step1);
@background-darkest: darken(spin(@background, -10), @colour-step2);

// Gutter percentage
@grid-gutter: 24/@grid-width;

// Gutter size in pixels
@gutterSize: floor((@grid-width * @grid-gutter) * 1px);


// This should be used in conjunction with normalize.css (http://necolas.github.com/normalize.css/)
#effortless
{
    /**
    * Fix for placeholder colours
    **/
    .placeholder(@colour)
    {

      &::-webkit-input-placeholder,
      &::-moz-placeholder,
      &:-moz-placeholder,
      &:-ms-placeholder
      {
        color: @colour;
      }
    }

    /**
    * All dimension type modifiers should be placed within this namespace
    */
    #dimension
    {
        /**
        *  Helper for setting the minimum size of an element
        */
        .min-size(@minSize)
        {
            #effortless > #dimension > .min-size(@minSize, @minSize);
        }

        /**
        *  Helper for setting the minimum size of an element
        */
        .min-size(@minWidth, @minHeight)
        {
            #effortless > #dimension > .min-width(@minWidth);
            #effortless > #dimension > .min-height(@minHeight);
        }

        /**
        * Cross browser rules for setting the minimum width of an element
        */
        .min-width(@minWidth : 800)
        {
            min-width: ~"@{minWidth}px"; width:~"expression(document.body.clientWidth < @{minWidth} ? '@{minWidth}px': 'auto' )";
        }


        /**
        * Cross browser rules for setting the minimum height of an element
        */
        .min-height(@minHeight : 600)
        {
            min-height: ~"@{minHeight}px"; height:~"expression(document.body.clientHeight < @{minHeight} ? '@{minHeight}px': 'auto' )";
        }

        /**
        *  Helper for setting the maximum size of an element
        */
        .max-size(@maxSize)
        {
            #effortless > #dimension > .max-size(@maxSize, @maxSize);
        }

        /**
        *  Helper for setting the maximum size of an element
        */
        .max-size(@maxWidth, @maxHeight)
        {
            #effortless > #dimension > .max-width(@maxWidth);
            #effortless > #dimension > .max-height(@maxHeight);
        }

        /**
        * Cross browser rules for setting the maximum height of an element
        */
        .max-height(@maxHeight : 600)
        {
            overflow: hidden;
            max-height: ~"@{maxHeight}px"; height:~"expression(document.body.clientHeight > @{maxHeight} ? '@{maxHeight}px': 'auto' )";
        }

        /**
        * Cross browser rules for setting the maximum width of an element
        */
        .max-width(@maxWidth : 600)
        {
            overflow: hidden;
            max-width: ~"@{maxWidth}px"; width:~"expression(document.body.clientWidth > @{maxWidth} ? '@{maxWidth}px': 'auto' )";
        }

        .size(@width, @height)
        {
            width: @width;
            height: @height;
        }

        .size(@size)
        {
            #effortless > #dimension > .size(@size, @size);
        }
    }

    

    /**
    * Border related modifiers
    */
    #border
    {
        /**
        * Gives an element a rounded border
        **/
        .rounded(@size : 1px, @type : solid, @colour : black, @radius : @corner-radius){#effortless > #border > .rounded(@size, @type, @colour, @radius, @radius, @radius, @radius);}
        .rounded(@size : 1px, @type : solid, @colour : black, @left, @right){#effortless > #border > .rounded(@size, @type, @colour, @left, @right, @right, @left);}
        .rounded(@size : 1px, @type : solid, @colour : black, @topLeft, @topRight, @bottomRight, @bottomLeft)
        {
            border: @size @type @colour;
            #effortless > #background > .rounded(@topLeft, @topRight, @bottomRight, @bottomLeft);
        }
    }

    #transform
    {
        .matrix(@a  :1,  @b  :0, 
                @c  :0,  @d  :1, 
                @tx : 0, @ty :0)
        {
            transform: matrix(@a, @b, @c, @d, @tx, @ty);
            -webkit-transform: matrix(@a, @b, @c, @d, @tx, @ty);
            -moz-transform: matrix(@a, @b, @c, @d, @tx, @ty);
            -o-transform: matrix(@a, @b, @c, @d, @tx, @ty);
        }

        .matrix3d(@lx :1, @ly : 0, @lz : 0,
                  @wx :0, @wy : 1, @wz : 0,
                  @ax :0, @ay : 0, @az : 1,
                  @sx :0, @sy : 0, @sz : 0)
        {
            transform: matrix3d(@lx, @ly, @lz, 0,
                                @wx, @wy, @wz, 0,
                                @ax, @ay, @az, 0,
                                @sx, @sy, @sz, 1);
            -webkit-transform: matrix3d(@lx, @ly, @lz, 0,
                                        @wx, @wy, @wz, 0,
                                        @ax, @ay, @az, 0,
                                        @sx, @sy, @sz, 1);
            -moz-transform: matrix3d(@lx, @ly, @lz, 0,
                                     @wx, @wy, @wz, 0,
                                     @ax, @ay, @az, 0,
                                     @sx, @sy, @sz, 1);
            -o-transform: matrix3d(@lx, @ly, @lz, 0,
                                     @wx, @wy, @wz, 0,
                                     @ax, @ay, @az, 0,
                                     @sx, @sy, @sz, 1);
        }

        // TODO: Convert all transforms to direct matrix functions;
        .rotate3D(X, @degrees: 180)
        {
            @actualDegrees : @degrees * 1deg;
            transform: rotateX(@actualDegrees);
            -webkit-transform: rotateX(@actualDegrees); /* Safari and Chrome */
            -moz-transform: rotateX(@actualDegrees); /* Firefox */
            -o-transform: rotateX(@actualDegrees); /* Opera */
        }

        // TODO: Convert all transforms to direct matrix functions;
        .rotate3D(Y, @degrees: 180)
        {
            @actualDegrees : @degrees * 1deg;
            transform: rotateY(@actualDegrees);
            -webkit-transform: rotateY(@actualDegrees); /* Safari and Chrome */
            -moz-transform: rotateY(@actualDegrees); /* Firefox */
            -o-transform: rotateY(@actualDegrees); /* Opera */
        }

        .scale(@factor : 1.5){.scale(@factor, @factor);}

        .scale(@Xfactor : 1.5, @Yfactor : 1.5)
        {
            transform: scale(@Xfactor, @Yfactor);
            -webkit-transform: scale(@Xfactor, @Yfactor); /* Safari and Chrome */
            -moz-transform: scale(@Xfactor, @Yfactor); /* Firefox */
            -o-transform: scale(@Xfactor, @Yfactor);
        }

        // TODO: These is to be removed when implemented in the matrix3d;
        .spin(@scaleFactor: 1, @degrees: 359.9)
        {
            transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
            -webkit-transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
            -moz-transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
            -o-transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
        }

        .twist(@scaleFactor: 1, @degrees: 359.9)
        {
            transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
            -webkit-transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
            -moz-transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
            -o-transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
        }

        .transform(@rotate: 90deg, @scale: 1, @skew: 0deg, @translate: 0px) 
        {
            -webkit-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            -moz-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            -o-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            -ms-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
        }
    }


    #shadow
    {
        .shadow(@values)
        {
            -webkit-box-shadow : @values;
            -moz-box-shadow : @values;
            box-shadow : @values;
        }

        .shadow(@x, @y, @blur, @spread, @colour)
        {
            #effortless > #shadow > .drop(@x, @y, @blur, @spread, @colour);
        }

        .shadow(@x, @y, @blur, @spread, @colour, @inset)
        {
            #effortless > #shadow > .inner(@x, @y, @blur, @spread, @colour);
        }

        .drop(@colour : @darkest)
        {
            #effortless > #shadow > .drop(3px, 3px, 5px, 5px, @colour);
        }

        .drop(@x: 3px, @y: 3px, @blur: 5px, @spread : 5px, @colour)
        {
            -webkit-box-shadow: @x @y @blur @colour;
            -moz-box-shadow: @x @y @blur @colour;
            box-shadow: @x @y @blur @colour;

            // TODO: Calculate angle from 0, 0 -> x, y;
            -ms-filter: ~"progid:DXImageTransform.Microsoft.Shadow(Strength=@{blur}, Direction=135, Color='@{colour}')";/* IE 8 */
            filter: ~"progid:DXImageTransform.Microsoft.Shadow(Strength=@{blur}, Direction=135, Color='@{colour}')";/* For IE 5.5 - 7 */
        }

        .reset()
        {
            -webkit-box-shadow: none;
            -moz-box-shadow: none;
            box-shadow: none;
            -ms-filter: none;
            filter: none;
        }

        .glow(@colour : white, @blur : 5px)
        {
            #effortless > #shadow > .drop(0, 0, @blur, 5px, @colour);
        }

        .inner(@colour : @darkest)
        {
            #effortless > #shadow > .inner(3px, 3px, 5px, 5px, @colour);
        }

        .inner(@x: 3px, @y: 3px, @blur: 5px, @spread : 5px, @colour)
        {
            -webkit-box-shadow: inset @x @y @blur @spread @colour;
            -moz-box-shadow: inset @x @y @blur @spread @colour;
            box-shadow: inset @x @y @blur @spread @colour;
        }



        .text(@colour : @text-darkest){#effortless > #shadow > .text(3px, 3px, 5px, @colour);}

        .text(@x: 3px, @y: 3px, @blur: 5px, @colour){text-shadow: @x @y @blur @colour;}

        .letterpress(@colour : @text-lightest, @offset : 2px){#effortless > #shadow > .text(@offset, @offset, @offset, fadeout(@colour, 10));}

        .hard(@colour: @text-darkest, @offset : 2px){#effortless > #shadow > .text(@offset, @offset, 0px, @colour);}

        // TODO: The rules below should be calling the base rule
        .double(@colour1 : @text-lightest, @colour2: @text-darker, @offset : 2px)
        {
            text-shadow: @offset @offset 0px @colour1,
                                    @offset*2 @offset*2 0px @colour2;
        }

        .far(@colour : @text-darkest, @x-offset : 0px, @y-offset : 2px)
        {
            text-shadow: @x-offset @y-offset 0px @colour, 
                                    @x-offset*1.5 @y-offset*1.5 @x-offset fadeout(@colour,  85),
                                    @x-offset*2.5 @y-offset*2.5 @x-offset fadeout(@colour, 90),
                                    @x-offset*3.5 @y-offset*3.5 @x-offset fadeout(@colour, 90);
        }

        .close(@colour : @text-darkest, @x-offset : 0px, @y-offset : 2px)
        {
            text-shadow: @x-offset @y-offset 0px fadeout(@colour,  60),
                                    @x-offset*1.5 @y-offset*1.5 @x-offset fadeout(@colour,  90),
                                    @x-offset*2.5 @y-offset*2.5 @x-offset fadeout(@colour, 90);
        }

        .textGlow(@colour: @text-lightest, @size : 6px){text-shadow: 0px 0px @size @colour, 0px 0px @size @colour;}
    }

    #effects
    {
        .opacity(@opacity : .5)
        {
            @intOpacity: @opacity * 100;
            -ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(Opacity=@{intOpacity})";/* IE 8 */
            filter: ~"alpha(opacity=@{intOpacity})"; /* IE 5-7 */
            -moz-opacity: @opacity; /* Netscape */
            -khtml-opacity: @opacity; /* Safari 1.x */
            -o-opacity: @opacity; /* Opera */
            opacity: @opacity; /* Good browsers */
        }
    }
}

// Helper for centering
.center{#effortless > #layout > .center();}

.gridWidth(@grid-width, false)
{
  width: @grid-width * 1px;
}

.gridWidth(@grid-width, true)
{
  width: @grid-width * 1px;

  // Mobile portrait
  @media screen and (max-width: @smallScreen * 1px)
  {
    width: @grid-width * (@mobileScreen/@grid-width) * 1px;
  }

  // Low Res Desktop / tablet, mobile landscape
  @media screen and (max-width: @mediumScreen - 1px) and (min-width: @smallScreen * 1px)
  {
    width: @grid-width * (@smallScreen/@grid-width) * 1px;
  }

  // Medium Res Desktop (Default for IE 6-8)
  @media screen and (max-width: @regularScreen - 1px) and (min-width: @mediumScreen * 1px)
  {
    width: @grid-width * (@mediumScreen/@grid-width) * 1px;
  }

  // Regular Desktop
  @media screen and (max-width: @largeScreen - 1px) and (min-width: @regularScreen * 1px)
  {
    width: @grid-width * (@regularScreen/@grid-width) * 1px;
  }

  // Large
  @media screen and (max-width: @extraLargeScreen - 1px) and (min-width: @largeScreen * 1px)
  {
    width: @grid-width * (@largeScreen/@grid-width) * 1px;
  }

  // X-Large
  @media screen and (min-width: @extraLargeScreen * 1px)
  {
    width: @grid-width * (@extraLargeScreen/@grid-width) * 1px;
  }

}

.colWidth(@columnSize : 1, @grid-columns: @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter, false)
{
  @gutterSize : @grid-width * @grid-gutter;
  width: (@gutterSize * (@columnSize -1)) + (((@grid-width - (@gutterSize)) - ( @gutterSize * @grid-columns)) / @grid-columns * 1px * @columnSize);
}

.colWidth(@columnSize : 1, @grid-columns: @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter, true)
{
  @gutterSize : @grid-width * @grid-gutter;
  width: (@gutterSize * (@columnSize -1)) + (((@grid-width - (@gutterSize)) - ( @gutterSize * @grid-columns)) / @grid-columns * 1px * @columnSize);

  // Mobile portrait
  @media screen and (max-width: @smallScreen * 1px)
  {
    @actualGutter = (@grid-gutter * @grid-width)/@mobileScreen;
    @actualWidth = @grid-width * (@mobileScreen/@grid-width);
    @gutterSize : @actualWidth * @actualGutter;
    display: block;
    width: @actualWidth - (@gutterSize*2) * 1px;
  }

  // Low Res Desktop / tablet, mobile landscape
  @media screen and (max-width: @mediumScreen - 1px) and (min-width: @smallScreen * 1px)
  {
    @actualGutter = (@grid-gutter * @grid-width)/@smallScreen;
    @actualWidth = @grid-width * (@smallScreen/@grid-width);
    @gutterSize : @actualWidth * @actualGutter;
    display: block;
    width: @actualWidth - (@gutterSize*2) * 1px;
  }

  // Medium Res Desktop (Default for IE 6-8)
  @media screen and (max-width: @regularScreen - 1px) and (min-width: @mediumScreen * 1px)
  {
    @actualGutter = (@grid-gutter * @grid-width)/@mediumScreen;
    @actualWidth = @grid-width * (@mediumScreen/@grid-width);
    @gutterSize : @actualWidth * @actualGutter;
    width: (@gutterSize * (@columnSize -1)) + (((@actualWidth - (@gutterSize)) - ( @gutterSize * @grid-columns)) / @grid-columns * 1px * @columnSize);
  }

  // Regular Desktop
  @media screen and (max-width: @largeScreen - 1px) and (min-width: @regularScreen * 1px)
  {
    @actualGutter = (@grid-gutter * @grid-width)/@regularScreen;
    @actualWidth = @grid-width * (@regularScreen/@grid-width);
    @gutterSize : @actualWidth * @actualGutter;
    width: (@gutterSize * (@columnSize -1)) + (((@actualWidth - (@gutterSize)) - ( @gutterSize * @grid-columns)) / @grid-columns * 1px * @columnSize);
  }

  // Large
  @media screen and (max-width: @extraLargeScreen - 1px) and (min-width: @largeScreen * 1px)
  {
    @actualGutter = (@grid-gutter * @grid-width)/@largeScreen;
    @actualWidth = @grid-width * (@largeScreen/@grid-width);
    @gutterSize : @actualWidth * @actualGutter;
    width: (@gutterSize * (@columnSize -1)) + (((@actualWidth - (@gutterSize)) - ( @gutterSize * @grid-columns)) / @grid-columns * 1px * @columnSize);
  }

  // X-Large
  @media screen and (min-width: @extraLargeScreen * 1px)
  {
    @actualGutter = (@grid-gutter * @grid-width)/@extraLargeScreen;
    @actualWidth = @grid-width * (@extraLargeScreen/@grid-width);
    @gutterSize : @actualWidth * @actualGutter;
    width: (@gutterSize * (@columnSize -1)) + (((@actualWidth - (@gutterSize)) - ( @gutterSize * @grid-columns)) / @grid-columns * 1px * @columnSize);
  }
}

.grid{.gridLayout;}

// // TODO: Need to include offsetting, left and right margin;
// // TODO: Need to add subcolumns;
// // TODO: Look at adding in percentage width;

.column(half, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
  .column(@grid-columns/2, @grid-columns, @grid-width, @grid-gutter);
}
.column(eighth, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
  .column(@grid-columns/8, @grid-columns, @grid-width, @grid-gutter);
}
.column(third, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
  .column(@grid-columns/3, @grid-columns, @grid-width, @grid-gutter);
}
.column(twoThirds, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
  .column((@grid-columns/3)*2, @grid-columns, @grid-width, @grid-gutter);
}
.column(quarter, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
  .column(@grid-columns/4, @grid-columns, @grid-width, @grid-gutter);
}
.column(threeQuarters, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
  .column((@grid-columns/4)*3, @grid-columns, @grid-width, @grid-gutter);
}
.column(whole, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter)
{
  .column(@grid-columns, @grid-columns, @grid-width, @grid-gutter);
}



.row(@grid-width : @grid-width, @grid-columns: @grid-columns, @grid-gutter : @grid-gutter)
{
  @marginSize: (@grid-width * @grid-gutter) / 2px;
  .cf;
  #effortless > #layout > .center();
  .gridWidth(@grid-width, @responsive);
  padding-left: floor(@marginSize);
  padding-right: ceil(@marginSize);

  &.twoColumn > div {.column(half, @grid-columns, @grid-width, @grid-gutter);}
  &.threeColumn > div {.column(third, @grid-columns, @grid-width, @grid-gutter);}
  &.fourColumn > div {.column(quarter, @grid-columns, @grid-width, @grid-gutter);}

  & > .column{.column;}
}

.colHeight(@columnCount : 1, @grid-columns: @grid-columns, @grid-width : @grid-width, @gutter : @grid-gutter)
{
  @gutterSize : @grid-width * @grid-gutter;
  height: (@gutterSize * (@columnSize -1)) + (((@grid-width - (@gutterSize)) - ( @gutterSize * @grid-columns)) / @grid-columns * 1px * @columnSize);
}

.column(@columnCount: 1, @grid-columns : @grid-columns, @grid-width : @grid-width, @grid-gutter : @grid-gutter) when (isnumber(@columnCount))
{
  @marginSize: (@grid-width * @grid-gutter) / 2px;
  .colWidth(@columnCount, @grid-columns, @grid-width, @grid-gutter, @responsive);
  display: inline-block;
  margin-left: floor(@marginSize);
  margin-right: ceil(@marginSize);
  float: left;
  .cf;

  &.padded
  {
    padding-left: @marginSize;
    padding-right: @marginSize;
  }
}

html
{
  // Mobile portrait
  @media screen and (max-width: @smallScreen * 1px)
  {
    .mobileScreen;
  }

  // Low Res Desktop / tablet, mobile landscape
  @media screen and (max-width: @mediumScreen - 1px) and (min-width: @smallScreen * 1px)
  {
    .smallScreen;
  }

  // Medium Res Desktop (Default for IE 6-8)
  @media screen and (max-width: @regularScreen - 1px) and (min-width: @mediumScreen * 1px)
  {
    .mediumScreen;
  }

  // Regular Desktop
  @media screen and (max-width: @largeScreen - 1px) and (min-width: @regularScreen * 1px)
  {
    .regularScreen;
  }

  // Large
  @media screen and (max-width: @extraLargeScreen - 1px) and (min-width: @largeScreen * 1px)
  {
    .largeScreen;
  }

  // X-Large
  @media screen and (min-width: @extraLargeScreen * 1px)
  {
    .extraLargeScreen;
  }
}

html .column{.column;}

html .row{.row;}

.gridLayout(@grid-width : @grid-width, @grid-columns: @grid-columns, @grid-gutter : @grid-gutter)
{
  .cf;
  .gridWidth(@grid-width, @responsive);
  .center;

  > *{.row(@grid-width, @grid-columns, @grid-gutter);}

  & .column.one {.column;}
  & .column.two {.column(2);}
  & .column.three {.column(3);}
  & .column.four {.column(4);}
  & .column.five {.column(5);}
  & .column.six {.column(6);}
  & .column.seven {.column(7);}
  & .column.eight {.column(8);}
  & .column.nine {.column(9);}
  & .column.ten {.column(10);}
  & .column.eleven {.column(11);}
  & .column.twelve {.column(12);}
  & .column.thirteen {.column(13);}
  & .column.fourteen {.column(14);}
  & .column.fifteen {.column(15);}
  & .column.sixteen {.column(16);}

  & .column.half {.column(half, @grid-columns, @grid-width, @grid-gutter);}
  & .column.third {.column(third, @grid-columns, @grid-width, @grid-gutter);}
  & .column.twoThirds {.column(twoThirds, @grid-columns, @grid-width, @grid-gutter);}
  & .column.quarter {.column(quarter, @grid-columns, @grid-width, @grid-gutter);}
  & .column.eighth {.column(eighth, @grid-columns, @grid-width, @grid-gutter);}
  & .column.threeQuarters {.column(threeQuarters, @grid-columns, @grid-width, @grid-gutter);}
  & .column.whole {.column(whole, @grid-columns, @grid-width, @grid-gutter);}
}



.more:after{content: "\00A0\000BB";}

/*! normalize.css 2011-11-04T15:38 UTC - http://github.com/necolas/normalize.css AND  http://meyerweb.com/eric/tools/css/reset/ v2.0 | 20110126 License: none (public domain)*/
article,aside,details,figcaption,figure,footer,header,hgroup,nav,section{display:block}audio,canvas,video{display:inline-block;*display:inline;*zoom:1}audio:not([controls]){display:none}[hidden]{display:none}html{font-size:100%;overflow-y:scroll;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}body,button,input,select,textarea{font-family:inherit}a:focus{outline:thin dotted}a:hover,a:active{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}blockquote{margin:1em 40px}dfn{font-style:italic}mark{background:#ff0;color:#000}pre,code,kbd,samp{font-family:inherit;_font-family:inherit;}pre{white-space:pre;white-space:pre-wrap;word-wrap:break-word}q{quotes:none}q:before,q:after{content:'';content:none}small{font-size:75%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}ul,ol{margin-left:0;padding:0 0 0 40px}dd{margin:0 0 0 40px}nav ul,nav ol{list-style:none;list-style-image:none}img{border:0;-ms-interpolation-mode:bicubic}svg:not(:root){overflow:hidden}figure{margin:0}form{margin:0}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:.35em .625em .75em}legend{border:0;*margin-left:-7px}button,input,select,textarea{font-size:100%;margin:0;vertical-align:baseline;*vertical-align:middle}button,input{line-height:normal}button,input[type="button"],input[type="reset"],input[type="submit"]{cursor:pointer;-webkit-appearance:button;*overflow:visible}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}textarea{overflow:auto;vertical-align:top}table{border-collapse:collapse;border-spacing:0}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none}table{border-collapse:collapse;border-spacing:0}

*
{
    -moz-box-sizing : border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

span{display: inline-block;}  // Fix for firefox

@import "default.less";




