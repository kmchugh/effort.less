/**
 * When including effort.less in a page, the following variables must be defined to set up the defaults
 * This will remain this way until the lessphp compiler allows the overridding of variables like the .js compiler does
 *
 * @grid-columns: 12;       // This would mean a base grid of 12 columns
 * @grid-width: 768;           // This will fix a row at 768 pixels
 * @grid-gutter: .03;           // This will create gutters of .03%
 * @corner-radius: 6px;     // All corner would have a 6px radius by default
 * @base-colour: red;   // The base colour scheme would be red, a colour scheme would be created from that
 * @text-colour: blue; // Default text colour would be blue, a default would be created from that
 * @background-colour: white;   // Background colour would be blue a scheme would be created  from that
 * */

@colour-step1 : 10%;
@colour-step2: 20%;

// Colour definitions :
// BASE colour scheme
@colour: @base-colour;      // Base colour
@lighter: lighten(spin(@colour, 5), @colour-step1);
@lightest: lighten(spin(@colour, 10), @colour-step2);
@darker: darken(spin(@colour, -5), @colour-step1);
@darkest: darken(spin(@colour, -10), @colour-step2);

// COMPLIMENT colour scheme
@comp: spin(@colour, 180);
@comp-lighter: lighten(spin(@comp, 5), @colour-step1);
@comp-lightest: lighten(spin(@comp, 10), @colour-step2);
@comp-darker: darken(spin(@comp, -5), @colour-step1);
@comp-darkest: darken(spin(@comp, -10), @colour-step2);

// TEXT colour scheme
@text: @text-colour;
@text-lighter: lighten(spin(@text, 5), @colour-step1);
@text-lightest: lighten(spin(@text, 10), @colour-step2);
@text-darker: darken(spin(@text, -5), @colour-step1);
@text-darkest: darken(spin(@text, -10), @colour-step2);

// Background colour scheme
@background: @background-colour;
@background-lighter: lighten(spin(@background, 5), @colour-step1);
@background-lightest: lighten(spin(@background, 10), @colour-step2);
@background-darker: darken(spin(@background, -5), @colour-step1);
@background-darkest: darken(spin(@background, -10), @colour-step2);

// Gutter percentage
@grid-gutter: 24/@grid-width;

// Gutter size in pixels
@gutterSize: floor((@grid-width * @grid-gutter) * 1px);


// This should be used in conjunction with normalize.css (http://necolas.github.com/normalize.css/)
#effortless
{
    /**
    * Fix for placeholder colours
    **/
    .placeholder(@colour)
    {

      &::-webkit-input-placeholder,
      &::-moz-placeholder,
      &:-moz-placeholder,
      &:-ms-placeholder
      {
        color: @colour;
      }
    }

    #transform
    {
        .matrix(@a  :1,  @b  :0, 
                @c  :0,  @d  :1, 
                @tx : 0, @ty :0)
        {
            transform: matrix(@a, @b, @c, @d, @tx, @ty);
            -webkit-transform: matrix(@a, @b, @c, @d, @tx, @ty);
            -moz-transform: matrix(@a, @b, @c, @d, @tx, @ty);
            -o-transform: matrix(@a, @b, @c, @d, @tx, @ty);
        }

        .matrix3d(@lx :1, @ly : 0, @lz : 0,
                  @wx :0, @wy : 1, @wz : 0,
                  @ax :0, @ay : 0, @az : 1,
                  @sx :0, @sy : 0, @sz : 0)
        {
            transform: matrix3d(@lx, @ly, @lz, 0,
                                @wx, @wy, @wz, 0,
                                @ax, @ay, @az, 0,
                                @sx, @sy, @sz, 1);
            -webkit-transform: matrix3d(@lx, @ly, @lz, 0,
                                        @wx, @wy, @wz, 0,
                                        @ax, @ay, @az, 0,
                                        @sx, @sy, @sz, 1);
            -moz-transform: matrix3d(@lx, @ly, @lz, 0,
                                     @wx, @wy, @wz, 0,
                                     @ax, @ay, @az, 0,
                                     @sx, @sy, @sz, 1);
            -o-transform: matrix3d(@lx, @ly, @lz, 0,
                                     @wx, @wy, @wz, 0,
                                     @ax, @ay, @az, 0,
                                     @sx, @sy, @sz, 1);
        }

        // TODO: Convert all transforms to direct matrix functions;
        .rotate3D(X, @degrees: 180)
        {
            @actualDegrees : @degrees * 1deg;
            transform: rotateX(@actualDegrees);
            -webkit-transform: rotateX(@actualDegrees); /* Safari and Chrome */
            -moz-transform: rotateX(@actualDegrees); /* Firefox */
            -o-transform: rotateX(@actualDegrees); /* Opera */
        }

        // TODO: Convert all transforms to direct matrix functions;
        .rotate3D(Y, @degrees: 180)
        {
            @actualDegrees : @degrees * 1deg;
            transform: rotateY(@actualDegrees);
            -webkit-transform: rotateY(@actualDegrees); /* Safari and Chrome */
            -moz-transform: rotateY(@actualDegrees); /* Firefox */
            -o-transform: rotateY(@actualDegrees); /* Opera */
        }

        .scale(@factor : 1.5){.scale(@factor, @factor);}

        .scale(@Xfactor : 1.5, @Yfactor : 1.5)
        {
            transform: scale(@Xfactor, @Yfactor);
            -webkit-transform: scale(@Xfactor, @Yfactor); /* Safari and Chrome */
            -moz-transform: scale(@Xfactor, @Yfactor); /* Firefox */
            -o-transform: scale(@Xfactor, @Yfactor);
        }

        // TODO: These is to be removed when implemented in the matrix3d;
        .spin(@scaleFactor: 1, @degrees: 359.9)
        {
            transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
            -webkit-transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
            -moz-transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
            -o-transform: scale(@scaleFactor, @scaleFactor) rotate(@degrees);
        }

        .twist(@scaleFactor: 1, @degrees: 359.9)
        {
            transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
            -webkit-transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
            -moz-transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
            -o-transform: scale(@scaleFactor, @scaleFactor) rotateY(@degrees);
        }

        .transform(@rotate: 90deg, @scale: 1, @skew: 0deg, @translate: 0px) 
        {
            -webkit-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            -moz-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            -o-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            -ms-transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
            transform: rotate(@rotate) scale(@scale) skew(@skew) translate(@translate);
        }
    }


    #effects
    {
        .opacity(@opacity : .5)
        {
            @intOpacity: @opacity * 100;
            -ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(Opacity=@{intOpacity})";/* IE 8 */
            filter: ~"alpha(opacity=@{intOpacity})"; /* IE 5-7 */
            -moz-opacity: @opacity; /* Netscape */
            -khtml-opacity: @opacity; /* Safari 1.x */
            -o-opacity: @opacity; /* Opera */
            opacity: @opacity; /* Good browsers */
        }
    }
}




